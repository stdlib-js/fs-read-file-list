{
  "version": 3,
  "sources": ["../lib/config.json", "../lib/delay.js", "../lib/clear_timeout.js", "../lib/clear_pending.js", "../lib/async.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"max_retries\": 100,\n\t\"max_delay\": 1800000\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = delay;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = clearTimeout;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar cancelTimeout = require( './clear_timeout.js' );\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = clearPending;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar assign = require( '@stdlib/object-assign' );\nvar readFile = require( '@stdlib/fs-read-file' );\nvar format = require( '@stdlib/string-format' );\nvar config = require( './config.json' );\nvar delay = require( './delay.js' );\nvar clearPending = require( './clear_pending.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\topts = assign( {}, options );\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'unexpected error. Max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileListSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs-read-file-list\n*\n* @example\n* var readFileList = require( '@stdlib/fs-read-file-list' );\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* var readFileList = require( '@stdlib/fs-read-file-list' ).sync;\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar readFileList = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n"],
  "mappings": "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",
  "names": ["require_config", "__commonJSMin", "exports", "module", "require_delay", "__commonJSMin", "exports", "module", "pow", "delay", "retries", "max", "d", "require_clear_timeout", "__commonJSMin", "exports", "module", "require_clear_pending", "__commonJSMin", "exports", "module", "objectKeys", "cancelTimeout", "clearPending", "pending", "keys", "require_async", "__commonJSMin", "exports", "module", "logger", "isStringArray", "isFunction", "assign", "readFile", "format", "config", "delay", "clearPending", "debug", "MAX_RETRIES", "MAX_DELAY", "readFileList", "list", "options", "clbk", "pending", "results", "errFLG", "count", "opts", "len", "cb", "i", "getCallback", "idx", "retries", "file", "k", "retry", "onRead", "error", "data", "d", "done", "require_sync", "__commonJSMin", "exports", "module", "logger", "readFile", "isStringArray", "format", "debug", "readFileListSync", "list", "options", "results", "opts", "file", "len", "i", "setReadOnly", "readFileList", "sync"]
}
