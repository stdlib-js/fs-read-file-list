"use strict";var y=function(e,r){return function(){return r||e((r={exports:{}}).exports,r),r.exports}};var F=y(function(oe,K){K.exports={max_retries:100,max_delay:18e5}});var R=y(function(le,b){"use strict";var N=require("@stdlib/math-base-special-pow");function O(e,r){var i=N(2,e)-1;return i>r&&(i=r),i}b.exports=O});var T=y(function(ve,x){"use strict";x.exports=clearTimeout});var S=y(function(ce,A){"use strict";var W=require("@stdlib/utils-keys"),Y=T();function z(e){var r,i;for(r=W(e),i=0;i<r.length;i++)Y(e[r[i]])}A.exports=z});var P=y(function(ge,I){"use strict";var B=require("debug"),H=require("@stdlib/assert-is-string-array").primitives,J=require("@stdlib/assert-is-string").isPrimitive,Q=require("@stdlib/assert-is-function"),U=require("@stdlib/object-assign"),L=require("@stdlib/fs-read-file"),_=require("@stdlib/string-format"),k=F(),Z=R(),$=S(),t=B("read-file-list:async"),M=k.max_retries,ee=k.max_delay;function re(e,r,i){var d,u,s,a,m,n,c,o;if(!H(e))throw new TypeError(_("invalid argument. First argument must be an array of strings. Value: `%s`.",e));if(arguments.length<3?(m={},c=r):(J(r)?m=r:m=U({},r),c=i),!Q(c))throw new TypeError(_("invalid argument. Callback argument must be a function. Value: `%s`.",c));for(n=e.length,u=new Array(n),d={},a=0,t("Reading %d files...",n),o=0;o<n;o++)t("Reading file: %s (%d of %d).",e[o],o+1,n),L(e[o],m,X(o));function X(f){var q,l,g;l=e[f],g=f+1,q=0;function j(){delete d[f],t("Reading file: %s (%d of %d). Retry: %d of %d.",l,g,n,q,M),L(l,m,w)}function w(v,G){var h;if(s){t("An error has already been returned. Discarding data for file: %s (%d of %d).",l,g,n);return}if(v){if(t("Encountered an error when reading %s (%d of %d). Error: %s",l,g,n,v.message),v.code==="EMFILE"||v.code==="ENFILE"){if(q+=1,q>M)return t("Maximum number of retries exceeded. Too many open files."),v=new Error("unexpected error. Max retries exceeded. Too many open files."),p(v);h=Z(q,ee),t("Too many open files. Will retry reading file %d of %d in %s seconds.",g,n,h/1e3),d[f]=setTimeout(j,h);return}return p(v)}if(t("Successfully read file: %s (%d of %d).",l,g,n),u[f]={file:l,data:G},a+=1,t("Read %d of %d files.",a,n),a===n)return p()}return w}function p(f){if($(d),f)return s=!0,c(f);t("Successfully read all files."),c(null,u)}}I.exports=re});var C=y(function(ye,V){"use strict";var ae=require("debug"),ie=require("@stdlib/fs-read-file").sync,ne=require("@stdlib/assert-is-string-array").primitives,se=require("@stdlib/string-format"),E=ae("read-file-list:sync");function te(e,r){var i,d,u,s,a;if(!ne(e))throw new TypeError(se("invalid argument. First argument must be an array of strings. Value: `%s`.",e));for(arguments.length>1?d=r:d={},s=e.length,i=new Array(s),E("Reading %d files...",s),a=0;a<s;a++){if(E("Reading file: %s (%d of %d).",e[a],a+1,s),u=ie(e[a],d),u instanceof Error)return E("Encountered an error when reading file: %s (%d of %d). Error: %s",e[a],a,s,u.message),u;E("Successfully read file: %s (%d of %d).",e[a],a,s),i[a]={file:e[a],data:u}}return E("Finished reading files."),i}V.exports=te});var ue=require("@stdlib/utils-define-nonenumerable-read-only-property"),D=P(),de=C();ue(D,"sync",de);module.exports=D;
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
