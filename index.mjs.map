{"version":3,"file":"index.mjs","sources":["../lib/delay.js","../lib/clear_timeout.js","../lib/clear_pending.js","../lib/async.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow' ;\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nexport default delay;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default clearTimeout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys' ;\nimport cancelTimeout from './clear_timeout.js' ;\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default clearPending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport copy from '@stdlib/utils-copy' ;\nimport readFile from '@stdlib/fs-read-file' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport config from './config.json' ;\nimport delay from './delay.js' ;\nimport clearPending from './clear_pending.js' ;\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( '0C1CX', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( '0C12n', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'unexpected error. Max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { sync as readFile } from '@stdlib/fs-read-file' ;\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( '0C1CX', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nexport default readFileListSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs-read-file-list\n*\n* @example\n* import readFileList from '@stdlib/fs-read-file-list' ;\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* import { sync as readFileList } from '@stdlib/fs-read-file-list' ;\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport readFileList from './async.js' ;\nimport sync from './sync.js' ;\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readFileList;\n"],"names":["delay","retries","max","d","pow","cancelTimeout","clearTimeout","clearPending","pending","keys","i","objectKeys","length","debug","require$$0","MAX_RETRIES","config","MAX_DELAY","readFileList","list","options","clbk","results","errFLG","count","opts","len","cb","isStringArray","TypeError","format","arguments","copy","isFunction","Array","readFile","getCallback","idx","file","k","retry","onRead","error","data","message","code","done","Error","setTimeout","readFileListSync","setReadOnly","sync"],"mappings":"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"}