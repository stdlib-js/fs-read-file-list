{"version":3,"file":"index.mjs","sources":["../lib/clear_timeout.js","../lib/async.js","../lib/delay.js","../lib/clear_pending.js","../lib/sync.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default clearTimeout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport assign from '@stdlib/object-assign';\nimport readFile from '@stdlib/fs-read-file';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport config from './config.json';\nimport delay from './delay.js';\nimport clearPending from './clear_pending.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( '0OD3s', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = assign( {}, options );\n\t\t}\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( '0OD2b', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( format('0OD0H') );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nexport default delay;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport cancelTimeout from './clear_timeout.js';\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default clearPending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { sync as readFile } from '@stdlib/fs-read-file';\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( '0OD3s', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nexport default readFileListSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs-read-file-list\n*\n* @example\n* import readFileList from '@stdlib/fs-read-file-list';\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* import { sync as readFileList } from '@stdlib/fs-read-file-list';\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport readFileList from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readFileList;\n"],"names":["cancelTimeout","clearTimeout","debug","require$$0","MAX_RETRIES","config","MAX_DELAY","readFileList","list","options","clbk","pending","results","errFLG","count","opts","len","cb","i","isStringArray","TypeError","format","arguments","length","isString","assign","isFunction","Array","readFile","getCallback","idx","retries","file","k","retry","onRead","error","data","d","message","code","done","Error","max","pow","delay","setTimeout","keys","objectKeys","clearPending","readFileListSync","setReadOnly","sync"],"mappings":"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"}